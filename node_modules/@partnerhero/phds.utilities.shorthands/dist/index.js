"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onClickWrapper = exports.isObject = exports.smallestDeviceWidth = exports.disablePointerEvents = exports.focusRing = exports.inputSubLabel = exports.inputLabel = exports.marginOptions = exports.height100 = exports.width100 = exports.borderNone = exports.notAllowedcursorPointer = exports.cursorPointer = exports.whiteBgTheme = exports.primaryBgTheme = exports.darkGreyColorTheme = exports.primaryColorTheme = exports.blackColorTheme = exports.whiteColorTheme = exports.borderRadius3px = void 0;
const styled_components_1 = require("styled-components");
exports.borderRadius3px = (0, styled_components_1.css) `
    border-radius: 3px;
`;
exports.whiteColorTheme = (0, styled_components_1.css) `
    color: ${(props) => `${props.theme.colors.white}`};
`;
exports.blackColorTheme = (0, styled_components_1.css) `
    color: ${(props) => `${props.theme.colors.black}`};
`;
exports.primaryColorTheme = (0, styled_components_1.css) `
    color: ${(props) => `${props.theme.colors.primary}`};
`;
exports.darkGreyColorTheme = (0, styled_components_1.css) `
    color: ${(props) => `${props.theme.colors.black}`}; // TODO: Add a darker grey color
`;
exports.primaryBgTheme = (0, styled_components_1.css) `
    background-color: ${(props) => `${props.theme.colors.primary}`};
`;
exports.whiteBgTheme = (0, styled_components_1.css) `
    background-color: ${(props) => `${props.theme.colors.white}`};
`;
exports.cursorPointer = (0, styled_components_1.css) `
    cursor: pointer;
`;
exports.notAllowedcursorPointer = (0, styled_components_1.css) `
    cursor: not-allowed;
`;
exports.borderNone = (0, styled_components_1.css) `
    border: none;
`;
exports.width100 = (0, styled_components_1.css) `
    width: 100%;
`;
exports.height100 = (0, styled_components_1.css) `
    height: 100%;
`;
exports.marginOptions = (0, styled_components_1.css) `
    margin: ${(props) => props.margins && `${props.margins}`};
`;
exports.inputLabel = (0, styled_components_1.css) `
    margin: 0;
    color: ${(props) => `${props.theme.colors.greyDarker}`};
`;
exports.inputSubLabel = (0, styled_components_1.css) `
    margin: 0;
    color: ${(props) => `${props.theme.colors.greyLighter}`};
`;
/**
 * Place a focus ring around the element, behaves different for mouse and keyboard.
 * Default focus behavior for keyboard, custom behavior for mouse.
 */
exports.focusRing = (0, styled_components_1.css) `
    /* Focusing the button with a mouse, touch, or stylus will show a subtle drop shadow. */
    :focus:not(:focus-visible) {
        outline: none;
        box-shadow: 1px 1px 5px rgba(1, 1, 0, 0.7);
    }
`;
/** Disables all hover/active/focus styles while keeping them in the stylesheet
 *
 * This is useful to create components with disabled states without having conditional css rules
 */
exports.disablePointerEvents = (0, styled_components_1.css) `
    pointer-events: none;
`;
/**
 * Smallest device width in px: 320px
 */
exports.smallestDeviceWidth = 320;
const isObject = (obj) => obj !== null && typeof obj === 'object';
exports.isObject = isObject;
const onClickWrapper = (onClick) => {
    if (onClick) {
        return (e) => {
            e.stopPropagation();
            onClick(e);
        };
    }
    return undefined;
};
exports.onClickWrapper = onClickWrapper;
//# sourceMappingURL=index.js.map