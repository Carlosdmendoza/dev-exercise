/// <reference types="react" />
export declare const borderRadius3px: import("styled-components").FlattenSimpleInterpolation;
export declare const whiteColorTheme: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const blackColorTheme: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const primaryColorTheme: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const darkGreyColorTheme: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const primaryBgTheme: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const whiteBgTheme: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const cursorPointer: import("styled-components").FlattenSimpleInterpolation;
export declare const notAllowedcursorPointer: import("styled-components").FlattenSimpleInterpolation;
export declare const borderNone: import("styled-components").FlattenSimpleInterpolation;
export declare const width100: import("styled-components").FlattenSimpleInterpolation;
export declare const height100: import("styled-components").FlattenSimpleInterpolation;
export declare const marginOptions: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<{
    margins?: string;
}, any>>;
export declare const inputLabel: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const inputSubLabel: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
/**
 * Place a focus ring around the element, behaves different for mouse and keyboard.
 * Default focus behavior for keyboard, custom behavior for mouse.
 */
export declare const focusRing: import("styled-components").FlattenSimpleInterpolation;
/** Disables all hover/active/focus styles while keeping them in the stylesheet
 *
 * This is useful to create components with disabled states without having conditional css rules
 */
export declare const disablePointerEvents: import("styled-components").FlattenSimpleInterpolation;
/**
 * Smallest device width in px: 320px
 */
export declare const smallestDeviceWidth = 320;
export interface CSSProps {
    /**
     * Extra styles for the component.
     */
    style?: React.CSSProperties;
}
export interface BaseReactProps {
    innerRef?: React.Ref<any>;
    innerKey?: string | number;
}
export declare const isObject: (obj: any) => boolean;
export declare const onClickWrapper: (onClick?: React.MouseEventHandler<Element> | undefined) => React.MouseEventHandler<Element> | undefined;
