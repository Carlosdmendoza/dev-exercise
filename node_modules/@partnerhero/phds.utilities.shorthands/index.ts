import { css } from 'styled-components';

export const borderRadius3px = css`
    border-radius: 3px;
`;

export const whiteColorTheme = css`
    color: ${(props) => `${props.theme.colors.white}`};
`;

export const blackColorTheme = css`
    color: ${(props) => `${props.theme.colors.black}`};
`;

export const primaryColorTheme = css`
    color: ${(props) => `${props.theme.colors.primary}`};
`;

export const darkGreyColorTheme = css`
    color: ${(props) =>
        `${props.theme.colors.black}`}; // TODO: Add a darker grey color
`;

export const primaryBgTheme = css`
    background-color: ${(props) => `${props.theme.colors.primary}`};
`;

export const whiteBgTheme = css`
    background-color: ${(props) => `${props.theme.colors.white}`};
`;

export const cursorPointer = css`
    cursor: pointer;
`;

export const notAllowedcursorPointer = css`
    cursor: not-allowed;
`;

export const borderNone = css`
    border: none;
`;

export const width100 = css`
    width: 100%;
`;

export const height100 = css`
    height: 100%;
`;

export const marginOptions = css`
    margin: ${(props: { margins?: string }) =>
        props.margins && `${props.margins}`};
`;

export const inputLabel = css`
    margin: 0;
    color: ${(props) => `${props.theme.colors.greyDarker}`};
`;

export const inputSubLabel = css`
    margin: 0;
    color: ${(props) => `${props.theme.colors.greyLighter}`};
`;

/**
 * Place a focus ring around the element, behaves different for mouse and keyboard.
 * Default focus behavior for keyboard, custom behavior for mouse.
 */
export const focusRing = css`
    /* Focusing the button with a mouse, touch, or stylus will show a subtle drop shadow. */
    :focus:not(:focus-visible) {
        outline: none;
        box-shadow: 1px 1px 5px rgba(1, 1, 0, 0.7);
    }
`;

/** Disables all hover/active/focus styles while keeping them in the stylesheet
 *
 * This is useful to create components with disabled states without having conditional css rules
 */
export const disablePointerEvents = css`
    pointer-events: none;
`;

/**
 * Smallest device width in px: 320px
 */
export const smallestDeviceWidth = 320;

export interface CSSProps {
    /**
     * Extra styles for the component.
     */
    style?: React.CSSProperties;
}

export interface BaseReactProps {
    innerRef?: React.Ref<any>;
    innerKey?: string | number;
}

export const isObject = (obj: any) => obj !== null && typeof obj === 'object';
export const onClickWrapper = (
    onClick?: React.MouseEventHandler<Element> | undefined,
): React.MouseEventHandler<Element> | undefined => {
    if (onClick) {
        return (e) => {
            e.stopPropagation();
            onClick(e);
        };
    }
    return undefined;
};
