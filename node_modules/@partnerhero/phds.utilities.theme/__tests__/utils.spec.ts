// write unit tests for these functions using jest
import { DefaultTheme } from 'styled-components';
import { getActiveColor, getHoverColor } from '../index';

const baseTheme: DefaultTheme = {
    colors: {
        primaryLightest: '#D3D3D3',
        primaryLighter: '#C0C0C0',
        primary: '#808080',
        primaryDarker: '#696969',
        primaryDarkest: '#2F4F4F',
        secondary: '#0070f3',
    },
} as unknown as DefaultTheme;

describe('Utils', () => {
    describe('getHoverColor', () => {
        it('should return the darker shade by default when using the base color variant', () => {
            const activeColor = getHoverColor('primary', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#696969');
        });

        it('should return the base color when using a base color that does not have a shade defined for it, or the base color does not exist', () => {
            const actual = getHoverColor('secondary', baseTheme);
            expect(actual).toEqual('secondary');
        });

        it('should return the lighter shade when using the lightest shade variant', () => {
            const activeColor = getHoverColor('primaryLightest', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#C0C0C0');
        });

        it('should return the base color when using the lighter color variant', () => {
            const activeColor = getHoverColor('primaryLighter', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#808080');
        });

        it('should return the darker shade when using the darkest shade variant and resetDarkerShades is false', () => {
            const activeColor = getHoverColor('primaryDarkest', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#696969');
        });

        it('should return the base color when using the darkest color variant and resetDarkerShades is true', () => {
            const activeColor = getHoverColor(
                'primaryDarkest',
                baseTheme,
                true,
            );
            expect(baseTheme.colors[activeColor]).toEqual('#808080');
        });

        it('should return the darkest color when using the darker color variant and resetDarkerShades is false', () => {
            const activeColor = getHoverColor(
                'primaryDarker',
                baseTheme,
                false,
            );
            expect(baseTheme.colors[activeColor]).toEqual('#2F4F4F');
        });

        it('should return the base color when using the darker color variant and resetDarkerShades is true', () => {
            const activeColor = getHoverColor('primaryDarker', baseTheme, true);
            expect(baseTheme.colors[activeColor]).toEqual('#808080');
        });
    });

    describe('getActiveColor', () => {
        it('should return the base color when using a base color that does not have a shade defined for it, or the base color does not exist', () => {
            const actual = getActiveColor('secondary', baseTheme);
            expect(actual).toEqual('secondary');
        });

        it('should return the darker color when using the lighter color variant', () => {
            const activeColor = getActiveColor('primaryLighter', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#696969');
        });

        it('should return the base color when using the darker color variant', () => {
            const activeColor = getActiveColor('primaryDarker', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#808080');
        });
        it('should return the darkest color when using the base color variant', () => {
            const activeColor = getActiveColor('primary', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#2F4F4F');
        });

        it('should return the base shade when using the lightest shade variant', () => {
            const activeColor = getActiveColor('primaryLightest', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#808080');
        });

        it('should return the base color when using the darkest shade variant', () => {
            const activeColor = getActiveColor('primaryDarkest', baseTheme);
            expect(baseTheme.colors[activeColor]).toEqual('#808080');
        });
    });
});
