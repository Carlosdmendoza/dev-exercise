/* eslint-disable @typescript-eslint/no-unsafe-assignment */
// TODO: remove these rules and make sure that the theme is properly typed
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */
import React from 'react';
import styled, { ThemeProvider } from 'styled-components';
import { defaultTheme } from './index';
import rgbThemes from './data';
import { Colors } from './components/types';

interface ThemeColorsProps {
    themeColor: Colors;
    fontColor: 'black' | 'white';
}

const lightColors = 'white' || 'primaryBackground' || 'secondaryBackground';

const ThemeColors = styled.p<ThemeColorsProps>`
    padding: 20px;
    font-weight: bold;
    width: 320px;
    height: 20px;
    color: ${(props) => `${props.theme.colors[props.fontColor]}`};
    background-color: ${(props) => `${props.theme.colors[props.themeColor]}`};
    box-shadow: ${(props) =>
        props.themeColor === lightColors && `0 2px 4px 0 rgba(0, 0, 0, 0.15)`};
`;

export const AvailableShadesColors = () => {
    const shades = rgbThemes.slice(0, 6);
    return (
        <ThemeProvider theme={defaultTheme}>
            {shades.map((rgbTheme) => {
                return (
                    <ThemeColors
                        key={rgbTheme.id}
                        themeColor={rgbTheme.themeColor}
                        fontColor="white"
                    >
                        {rgbTheme.themeColor} - {rgbTheme.rgbValue}
                    </ThemeColors>
                );
            })}
            <ThemeColors themeColor="white" fontColor="black">
                white - rgb(255, 255, 255)
            </ThemeColors>
        </ThemeProvider>
    );
};

export const AvailablePrimaryColors = () => {
    const primaryColors = rgbThemes.slice(7, 12);
    return (
        <ThemeProvider theme={defaultTheme}>
            {primaryColors.map((rgbTheme) => {
                return (
                    <ThemeColors
                        key={rgbTheme.id}
                        themeColor={rgbTheme.themeColor}
                        fontColor="white"
                    >
                        {rgbTheme.themeColor} - {rgbTheme.rgbValue}
                    </ThemeColors>
                );
            })}
            <ThemeColors themeColor="primaryBackground" fontColor="black">
                primarybackground - rgb(240, 246, 254)
            </ThemeColors>
        </ThemeProvider>
    );
};

export const AvailableSecondaryColors = () => {
    const secondaryColors = rgbThemes.slice(13, 18);
    return (
        <ThemeProvider theme={defaultTheme}>
            {secondaryColors.map((rgbTheme) => {
                return (
                    <ThemeColors
                        key={rgbTheme.id}
                        themeColor={rgbTheme.themeColor}
                        fontColor="white"
                    >
                        {rgbTheme.themeColor} - {rgbTheme.rgbValue}
                    </ThemeColors>
                );
            })}
            <ThemeColors themeColor="secondaryBackground" fontColor="black">
                secondaryBackground - rgb(247, 246, 255)
            </ThemeColors>
        </ThemeProvider>
    );
};

export const AvailableSuccessColors = () => {
    const successColors = rgbThemes.slice(19, 24);
    return (
        <ThemeProvider theme={defaultTheme}>
            {successColors.map((rgbTheme) => {
                return (
                    <ThemeColors
                        key={rgbTheme.id}
                        themeColor={rgbTheme.themeColor}
                        fontColor="white"
                    >
                        {rgbTheme.themeColor} - {rgbTheme.rgbValue}
                    </ThemeColors>
                );
            })}
        </ThemeProvider>
    );
};

export const AvailableNoticeColors = () => {
    const noticeColors = rgbThemes.slice(24, 29);
    return (
        <ThemeProvider theme={defaultTheme}>
            {noticeColors.map((rgbTheme) => {
                return (
                    <ThemeColors
                        key={rgbTheme.id}
                        themeColor={rgbTheme.themeColor}
                        fontColor="white"
                    >
                        {rgbTheme.themeColor} - {rgbTheme.rgbValue}
                    </ThemeColors>
                );
            })}
        </ThemeProvider>
    );
};

export const AvailableErrorColors = () => {
    const errorColors = rgbThemes.slice(29, 34);
    return (
        <ThemeProvider theme={defaultTheme}>
            {errorColors.map((rgbTheme) => {
                return (
                    <ThemeColors
                        key={rgbTheme.id}
                        themeColor={rgbTheme.themeColor}
                        fontColor="white"
                    >
                        {rgbTheme.themeColor} - {rgbTheme.rgbValue}
                    </ThemeColors>
                );
            })}
        </ThemeProvider>
    );
};

interface MockThemeProps {
    themeColor: Colors;
}

export const MockTheme = ({ themeColor }: MockThemeProps) => {
    return (
        <ThemeProvider theme={defaultTheme}>
            <ThemeColors
                data-testid="theme-colors"
                themeColor={themeColor}
                fontColor="white"
            >
                {themeColor}
            </ThemeColors>
        </ThemeProvider>
    );
};

interface PlaygroundThemeProps {
    themeColor: Colors;
}

export const PlaygroundTheme = ({ themeColor }: PlaygroundThemeProps) => {
    const lightColor =
        themeColor === 'white' ||
        themeColor === 'primaryBackground' ||
        themeColor === 'secondaryBackground';

    const getRGB = (
        themeArray: { id: number; themeColor: string; rgbValue: string }[],
        value: string,
    ) => {
        const result = rgbThemes.find((obj) => {
            return obj.themeColor === value;
        });

        return result ? result.rgbValue : null;
    };

    return (
        <ThemeProvider theme={defaultTheme}>
            <ThemeColors
                themeColor={themeColor}
                fontColor={lightColor ? 'black' : 'white'}
            >
                {themeColor} - {getRGB(rgbThemes, themeColor)}
            </ThemeColors>
        </ThemeProvider>
    );
};
