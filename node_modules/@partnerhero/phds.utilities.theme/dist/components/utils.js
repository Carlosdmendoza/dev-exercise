"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFontContrastColor = exports.getDisabledColor = exports.getActiveColor = exports.getHoverColor = void 0;
const types_1 = require("./types");
const extractBaseColorAndShade = (color) => {
    // Iterate through the BaseShadeTypeEnum and make them a string separated
    // by '|` for regex purposes
    const baseThemeShadeRegexString = Object.keys(types_1.ShadeEnum)
        .map((key) => types_1.ShadeEnum[key])
        .join('|');
    const baseThemeTypeRegex = new RegExp(`(${baseThemeShadeRegexString})`);
    // Get the base theme type from the color string
    const match = color.match(baseThemeTypeRegex);
    if (!match) {
        return { shade: undefined, baseColor: color };
    }
    const baseShade = match[0];
    const baseColor = color.replace(baseShade, '');
    return { shade: baseShade, baseColor };
};
/**
 * Function to get a lighter or darker color based on the current color and the available shades in the theme
 * This is used mostly used to get a contrast color for events like hover, active, etc.
 *
 * @param color The color to get the active color for
 * @param baseTheme The theme to get the active color from
 * @param resetDarkerShades Determines if the colors of the dark(er/est) shade should reset
 * to the base color or bounce back between them (Darker->Darkest/Darkest-> Darker).
 * Defaults to false.
 *
 * Behavior:
 *   - if the shade is "darkest", it can reset back to the base color or bounce back down to the darker shade
 *   - if the shade is "darker", it can reset back to the base color or bounce back up the darkest shade
 *   - if the shade is base, return the "darker" shade by default.
 *   - if the shade is "lighter", return the "base" color.
 *   - if the shade is "lightest", return the "lighter" shade.
 *   - if no shade is found, return the same color.
 *
 * When you are on the edges, you will get the lighter or darke shade
 */
const getHoverColor = (color, baseTheme, resetDarkerShades = false) => {
    let foundColorShade;
    // Iterate through the BaseShadeTypeEnum and make them a string separated
    // by '|` for regex purposes
    const baseThemeShadeRegexString = Object.keys(types_1.ShadeEnum)
        .map((key) => types_1.ShadeEnum[key])
        .join('|');
    const baseThemeTypeRegex = new RegExp(`(${baseThemeShadeRegexString})`);
    // Get the base theme type from the color string
    const match = color.match(baseThemeTypeRegex);
    // If we don't have a match, it means that its the base color,
    // so we default to the darker shade.
    if (!match) {
        foundColorShade = `${color}${types_1.ShadeEnum.Darker}`;
    }
    else {
        const baseShade = match[0];
        const baseColor = color.replace(baseShade, '');
        // Cases:
        switch (baseShade) {
            case types_1.ShadeEnum.Darkest:
                if (resetDarkerShades) {
                    foundColorShade = baseColor;
                }
                else {
                    foundColorShade =
                        `${baseColor}${types_1.ShadeEnum.Darker}`;
                }
                break;
            case types_1.ShadeEnum.Darker:
                if (resetDarkerShades) {
                    foundColorShade = baseColor;
                }
                else {
                    foundColorShade =
                        `${baseColor}${types_1.ShadeEnum.Darkest}`;
                }
                break;
            case types_1.ShadeEnum.Lighter:
                foundColorShade = `${baseColor}`;
                break;
            case types_1.ShadeEnum.Lightest:
                foundColorShade = `${baseColor}${types_1.ShadeEnum.Lighter}`;
                break;
            default:
                foundColorShade = undefined;
        }
    }
    // If we didn't find a color, return the passed color.
    const doesFoundShadeExist = foundColorShade && baseTheme.colors[foundColorShade];
    if (!doesFoundShadeExist || !foundColorShade) {
        return color;
    }
    return foundColorShade;
};
exports.getHoverColor = getHoverColor;
/**
 * Gets the active color for a given color based on the shades in the theme
 * This is used mostly used to get a contrast color for events like :active
 *
 * The behavior is as follows:
 * - When you pass a base color, it will return the darkest variant
 * - When you pass a darker variant, it will return the base color
 * - When you pass a lighter variant, it will return the darker variant
 * - When you pass a lightest variant, it will return the base color
 * - When you pass a darkest variant, it will return the base color
 * @param color The color to get the active color for
 * @param baseTheme The theme to get the active color from
 * @returns a string representing the active color
 */
const getActiveColor = (color, baseTheme) => {
    // First get the hover color
    const hoverColor = (0, exports.getHoverColor)(color, baseTheme);
    // Find if we should cycle back to the base color (if its a dark(er/est) shade)
    const shouldResetDarkerShades = color.includes(types_1.ShadeEnum.Darker) || color.includes(types_1.ShadeEnum.Darkest);
    // Get the active color based on hover color and the resetDarkerShades flag.
    const activeColor = (0, exports.getHoverColor)(hoverColor, baseTheme, shouldResetDarkerShades);
    return activeColor;
};
exports.getActiveColor = getActiveColor;
/**
 * Get the disabled color for a given color based on the shades in the theme
 *
 * The behaviour is as follows:
 * - When you pass a base color, it will return the lightest variant
 * - When you pass a darker variant, it will return the lighter variant
 * - When you pass a lighter variant, it will return the base color
 * - When you pass a lightest variant, it will return the lighter variant
 * - When you pass a darkest variant, it will return the lighter variant
 * @param color The color to get the disabled color for
 * @param baseTheme The theme to get the disabled color from
 * @returns a string representing the disabled color
 */
const getDisabledColor = (color, baseTheme) => {
    const { shade, baseColor } = extractBaseColorAndShade(color);
    if (shade === types_1.ShadeEnum.Lightest) {
        return baseTheme.colors.greyLightest;
    }
    return baseTheme.colors[`${baseColor}${types_1.ShadeEnum.Lightest}`];
};
exports.getDisabledColor = getDisabledColor;
/**
 * Get contrast value of black/white vs backdrop of color,
 * @param color the color to get the contrast value for
 * @param theme
 * @returns `black` or `white` from theme depending on luminance of color
 */
const getFontContrastColor = (color, theme, disabled) => {
    const luminance = color.luminosity();
    if (disabled) {
        return theme.colors.white;
    }
    return luminance < 0.3 ? theme.colors.white : theme.colors.black;
};
exports.getFontContrastColor = getFontContrastColor;
//# sourceMappingURL=utils.js.map