/**
 * SEMANTIC colors for the PHDS. Will have different shades
 *
 * If you need more, you can use declaration merging to extend this object.
 *
 * *Notes:*
 * - Whenever **refactoring** a color name, please make sure to alter both the key and the value
 */
export declare enum SemanticColorEnum {
    primary = "primary",
    secondary = "secondary",
    success = "success",
    notice = "notice",
    error = "error"
}
/**
 * PALETTE colors for the PHDS. Will have different shades.
 *
 * If you need more, you can use declaration merging to extend this object.
 *
 * *Notes:*
 * - Whenever **refactoring** a color name, please make sure to alter both the `key` and the `value`
 */
export declare enum PaletteColorEnum {
    grey = "grey"
}
/**
 * SHADES for the PHDS.
 *
 * If you need more, you can use declaration merging
 * to extend this object.
 *
 * *Notes:*
 * - Declare new shades in PascalCase as they will be composed together with the semantic
 * colors to create a camelCase color name.
 * - Whenever **refactoring** a color name, please make sure to alter both the key and the value
 */
export declare enum ShadeEnum {
    Darkest = "Darkest",
    Darker = "Darker",
    Lighter = "Lighter",
    Lightest = "Lightest"
}
/**
 * PLAIN colors (No shades!) for the PHDS.
 * For now also used for edge case colors. Like background colors.
 * Commented colors means that definitions were not found when migrating to V2.
 *
 * If you need more, you can use declaration merging to extend this object.
 */
export declare enum PlainColorsEnum {
    defaultColor = "defaultColor",
    black = "black",
    white = "white",
    primaryBackground = "primaryBackground",
    secondaryBackground = "secondaryBackground",
    mediaPlaceholderGrey = "mediaPlaceholderGrey"
}
/**
 * Contains accepted css keywords that are not rgb colors.
 * @example 'inherit'
 */
export declare enum KeywordColorEnum {
    transparent = "transparent",
    inherit = "inherit"
}
/**
 * The full color palette for the PHDS. **Automatically generated** from the
 * definitions of semantic and palette colors, shades of both, and plain colors
 * without shades.
 *
 * **It is recommended to use this type as a `Prop` type when creating PHDS
 * components**
 *
 * *Notes:*
 * - For use in logic chains that could get refactored later, please use {@link ColorsEnum}
 */
export declare type Colors = `${SemanticColorEnum}` | `${SemanticColorEnum}${ShadeEnum}` | `${PaletteColorEnum}` | `${PaletteColorEnum}${ShadeEnum}` | `${PlainColorsEnum}` | `${KeywordColorEnum}`;
/**
 * Type derived from {@link SemanticColorEnum}, used by the Design System components
 * for string literal hints.
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link SemanticColorEnum}.
 */
export declare type SemanticColor = `${SemanticColorEnum}`;
/**
 * Type derived from {@link PaletteColorEnum}, used by the Design System components
 * for string literal hints.
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link PaletteColorEnum}.
 */
export declare type PaletteColor = `${PaletteColorEnum}`;
/**
 * Type derived from {@link PlainColorsEnum}, used by the Design System components
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link PlainColorsEnum}.
 */
export declare type PlainColor = `${PlainColorsEnum}`;
/**
 * Type derived from {@link ShadeEnum}, used by the Design System components
 * for string literal hints.
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link ShadeEnum}.
 */
export declare type Shade = `${ShadeEnum}`;
/**
 * Type derived from {@link KeywordColorEnum}, used by the Design System components
 * for string literal hints.
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link KeywordColorEnum}.
 */
export declare type KeywordColor = `${KeywordColorEnum}`;
