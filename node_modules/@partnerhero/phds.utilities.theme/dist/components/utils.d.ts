import { DefaultTheme } from 'styled-components';
import Color from 'color';
import { Colors } from './types';
import { ColorValues } from './styled';
/**
 * Function to get a lighter or darker color based on the current color and the available shades in the theme
 * This is used mostly used to get a contrast color for events like hover, active, etc.
 *
 * @param color The color to get the active color for
 * @param baseTheme The theme to get the active color from
 * @param resetDarkerShades Determines if the colors of the dark(er/est) shade should reset
 * to the base color or bounce back between them (Darker->Darkest/Darkest-> Darker).
 * Defaults to false.
 *
 * Behavior:
 *   - if the shade is "darkest", it can reset back to the base color or bounce back down to the darker shade
 *   - if the shade is "darker", it can reset back to the base color or bounce back up the darkest shade
 *   - if the shade is base, return the "darker" shade by default.
 *   - if the shade is "lighter", return the "base" color.
 *   - if the shade is "lightest", return the "lighter" shade.
 *   - if no shade is found, return the same color.
 *
 * When you are on the edges, you will get the lighter or darke shade
 */
export declare const getHoverColor: (color: Colors, baseTheme: DefaultTheme, resetDarkerShades?: boolean) => Colors;
/**
 * Gets the active color for a given color based on the shades in the theme
 * This is used mostly used to get a contrast color for events like :active
 *
 * The behavior is as follows:
 * - When you pass a base color, it will return the darkest variant
 * - When you pass a darker variant, it will return the base color
 * - When you pass a lighter variant, it will return the darker variant
 * - When you pass a lightest variant, it will return the base color
 * - When you pass a darkest variant, it will return the base color
 * @param color The color to get the active color for
 * @param baseTheme The theme to get the active color from
 * @returns a string representing the active color
 */
export declare const getActiveColor: (color: Colors, baseTheme: DefaultTheme) => Colors;
/**
 * Get the disabled color for a given color based on the shades in the theme
 *
 * The behaviour is as follows:
 * - When you pass a base color, it will return the lightest variant
 * - When you pass a darker variant, it will return the lighter variant
 * - When you pass a lighter variant, it will return the base color
 * - When you pass a lightest variant, it will return the lighter variant
 * - When you pass a darkest variant, it will return the lighter variant
 * @param color The color to get the disabled color for
 * @param baseTheme The theme to get the disabled color from
 * @returns a string representing the disabled color
 */
export declare const getDisabledColor: (color: Colors, baseTheme: DefaultTheme) => ColorValues;
/**
 * Get contrast value of black/white vs backdrop of color,
 * @param color the color to get the contrast value for
 * @param theme
 * @returns `black` or `white` from theme depending on luminance of color
 */
export declare const getFontContrastColor: (color: Color, theme: DefaultTheme, disabled?: boolean) => Color;
