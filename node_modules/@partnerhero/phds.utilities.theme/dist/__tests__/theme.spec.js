"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
require("jest-styled-components");
const react_2 = require("@testing-library/react");
const theme_composition_1 = require("../theme.composition");
describe('Theme', () => {
    // shades
    it('Should match the rgb value related to the black color when the string black is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "black" }));
        const black = getByTestId('theme-colors');
        expect(black).toHaveStyleRule('background-color', 'rgb(10,10,10)');
    });
    it('Should match the rgb value related to the greyDarker color when the string greyDarker is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "greyDarker" }));
        const darkGrey = getByTestId('theme-colors');
        expect(darkGrey).toHaveStyleRule('background-color', 'rgb(30,30,30)');
    });
    it('Should match the rgb value related to the grey color when the string grey is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "grey" }));
        const lightGrey = getByTestId('theme-colors');
        expect(lightGrey).toHaveStyleRule('background-color', 'rgb(91,91,91)');
    });
    it('Should match the rgb value related to the greyLighter color when the string greyLighter is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "greyLighter" }));
        const lighterGrey = getByTestId('theme-colors');
        expect(lighterGrey).toHaveStyleRule('background-color', 'rgb(153,153,153)');
    });
    it('Should match the rgb value related to the greyLightest color when the string greyLightest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "greyLightest" }));
        const lightestGrey = getByTestId('theme-colors');
        expect(lightestGrey).toHaveStyleRule('background-color', 'rgb(214,214,214)');
    });
    it('Should match the rgb value related to the white color when the string white is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "white" }));
        const white = getByTestId('theme-colors');
        expect(white).toHaveStyleRule('background-color', 'rgb(255,255,255)');
    });
    it('Should match the rgb value related to the primaryDarkest color when the string primaryDarkest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "primaryDarkest" }));
        const primaryDarkest = getByTestId('theme-colors');
        expect(primaryDarkest).toHaveStyleRule('background-color', 'rgb(0,23,113)');
    });
    // primary
    it('Should match the rgb value related to the primaryDarker color when the string primaryDarker is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "primaryDarker" }));
        const primaryDarker = getByTestId('theme-colors');
        expect(primaryDarker).toHaveStyleRule('background-color', 'rgb(0,37,181)');
    });
    it('Should match the rgb value related to the primary color when the string primary is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "primary" }));
        const primary = getByTestId('theme-colors');
        expect(primary).toHaveStyleRule('background-color', 'rgb(0,53,255)');
    });
    it('Should match the rgb value related to the primaryLighter color when the string primaryLighter is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "primaryLighter" }));
        const primaryLighter = getByTestId('theme-colors');
        expect(primaryLighter).toHaveStyleRule('background-color', 'rgb(73,110,255)');
    });
    it('Should match the rgb value related to the primaryLightest color when the string primaryLightest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "primaryLightest" }));
        const primaryLightest = getByTestId('theme-colors');
        expect(primaryLightest).toHaveStyleRule('background-color', 'rgb(143,166,255)');
    });
    it('Should match the rgb value related to the primaryBackground color when the string primaryBackground is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "primaryBackground" }));
        const primaryBackground = getByTestId('theme-colors');
        expect(primaryBackground).toHaveStyleRule('background-color', 'rgb(240,246,254)');
    });
    // secondary
    it('Should match the rgb value related to the secondaryDarkest color when the string secondaryDarkest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "secondaryDarkest" }));
        const secondaryDarkest = getByTestId('theme-colors');
        expect(secondaryDarkest).toHaveStyleRule('background-color', 'rgb(33,10,76)');
    });
    it('Should match the rgb value related to the secondaryDarker color when the string secondaryDarker is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "secondaryDarker" }));
        const secondaryDarker = getByTestId('theme-colors');
        expect(secondaryDarker).toHaveStyleRule('background-color', 'rgb(53,16,122)');
    });
    it('Should match the rgb value related to the secondary color when the string secondary is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "secondary" }));
        const secondary = getByTestId('theme-colors');
        expect(secondary).toHaveStyleRule('background-color', 'rgb(76,23,173)');
    });
    it('Should match the rgb value related to the secondaryLighter color when the string secondaryLighter is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "secondaryLighter" }));
        const secondaryLighter = getByTestId('theme-colors');
        expect(secondaryLighter).toHaveStyleRule('background-color', 'rgb(127,89,196)');
    });
    it('Should match the rgb value related to the secondaryLightest color when the string secondaryLightest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "secondaryLightest" }));
        const secondaryLightest = getByTestId('theme-colors');
        expect(secondaryLightest).toHaveStyleRule('background-color', 'rgb(176,153,218)');
    });
    it('Should match the rgb value related to the secondaryBackground color when the string secondaryBackground is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "secondaryBackground" }));
        const secondaryBackground = getByTestId('theme-colors');
        expect(secondaryBackground).toHaveStyleRule('background-color', 'rgb(247,246,255)');
    });
    // success
    it('Should match the rgb value related to the successDarkest color when the string successDarkest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "successDarkest" }));
        const successDarkest = getByTestId('theme-colors');
        expect(successDarkest).toHaveStyleRule('background-color', 'rgb(24,56,0)');
    });
    it('Should match the rgb value related to the successDarker color when the string successDarker is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "successDarker" }));
        const successDarker = getByTestId('theme-colors');
        expect(successDarker).toHaveStyleRule('background-color', 'rgb(39,90,0)');
    });
    it('Should match the rgb value related to the success color when the string success is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "success" }));
        const success = getByTestId('theme-colors');
        expect(success).toHaveStyleRule('background-color', 'rgb(56,128,0)');
    });
    it('Should match the rgb value related to the successLighter color when the string successLighter is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "successLighter" }));
        const successLighter = getByTestId('theme-colors');
        expect(successLighter).toHaveStyleRule('background-color', 'rgb(113,164,74)');
    });
    it('Should match the rgb value related to the successLightest color when the string successLightest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "successLightest" }));
        const successLightest = getByTestId('theme-colors');
        expect(successLightest).toHaveStyleRule('background-color', 'rgb(167,199,143)');
    });
    // notice
    it('Should match the rgb value related to the noticeDarkest color when the string noticeDarkest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "noticeDarkest" }));
        const noticeDarkest = getByTestId('theme-colors');
        expect(noticeDarkest).toHaveStyleRule('background-color', 'rgb(153,111,0)');
    });
    it('Should match the rgb value related to the noticeDarker color when the string noticeDarker is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "noticeDarker" }));
        const noticeDarker = getByTestId('theme-colors');
        expect(noticeDarker).toHaveStyleRule('background-color', 'rgb(217,157,0)');
    });
    it('Should match the rgb value related to the notice color when the string notice is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "notice" }));
        const notice = getByTestId('theme-colors');
        expect(notice).toHaveStyleRule('background-color', 'rgb(255,185,0)');
    });
    it('Should match the rgb value related to the noticeLighter color when the string noticeLighter is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "noticeLighter" }));
        const noticeLighter = getByTestId('theme-colors');
        expect(noticeLighter).toHaveStyleRule('background-color', 'rgb(255,205,74)');
    });
    it('Should match the rgb value related to the noticeLightest color when the string noticeLightest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "noticeLightest" }));
        const noticeLightest = getByTestId('theme-colors');
        expect(noticeLightest).toHaveStyleRule('background-color', 'rgb(255,224,143)');
    });
    // error
    it('Should match the rgb value related to the errorDarkest color when the string errorDarkest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "errorDarkest" }));
        const errorDarkest = getByTestId('theme-colors');
        expect(errorDarkest).toHaveStyleRule('background-color', 'rgb(79,0,0)');
    });
    it('Should match the rgb value related to the errorDarker color when the string errorDarker is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "errorDarker" }));
        const errorDarker = getByTestId('theme-colors');
        expect(errorDarker).toHaveStyleRule('background-color', 'rgb(129,0,0)');
    });
    it('Should match the rgb value related to the error color when the string error is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "error" }));
        const error = getByTestId('theme-colors');
        expect(error).toHaveStyleRule('background-color', 'rgb(182,0,0)');
    });
    it('Should match the rgb value related to the errorLighter color when the string errorLighter is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "errorLighter" }));
        const errorLighter = getByTestId('theme-colors');
        expect(errorLighter).toHaveStyleRule('background-color', 'rgb(203,74,74)');
    });
    it('Should match the rgb value related to the errorLightest color when the string errorLightest is passed', () => {
        const { getByTestId } = (0, react_2.render)(react_1.default.createElement(theme_composition_1.MockTheme, { themeColor: "errorLightest" }));
        const errorLightest = getByTestId('theme-colors');
        expect(errorLightest).toHaveStyleRule('background-color', 'rgb(222,143,143)');
    });
});
//# sourceMappingURL=theme.spec.js.map