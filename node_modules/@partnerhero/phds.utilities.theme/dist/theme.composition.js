"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaygroundTheme = exports.MockTheme = exports.AvailableErrorColors = exports.AvailableNoticeColors = exports.AvailableSuccessColors = exports.AvailableSecondaryColors = exports.AvailablePrimaryColors = exports.AvailableShadesColors = void 0;
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
// TODO: remove these rules and make sure that the theme is properly typed
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */
const react_1 = __importDefault(require("react"));
const styled_components_1 = __importStar(require("styled-components"));
const index_1 = require("./index");
const data_1 = __importDefault(require("./data"));
const lightColors = 'white' || 'primaryBackground' || 'secondaryBackground';
const ThemeColors = styled_components_1.default.p `
    padding: 20px;
    font-weight: bold;
    width: 320px;
    height: 20px;
    color: ${(props) => `${props.theme.colors[props.fontColor]}`};
    background-color: ${(props) => `${props.theme.colors[props.themeColor]}`};
    box-shadow: ${(props) => props.themeColor === lightColors && `0 2px 4px 0 rgba(0, 0, 0, 0.15)`};
`;
const AvailableShadesColors = () => {
    const shades = data_1.default.slice(0, 6);
    return (react_1.default.createElement(styled_components_1.ThemeProvider, { theme: index_1.defaultTheme },
        shades.map((rgbTheme) => {
            return (react_1.default.createElement(ThemeColors, { key: rgbTheme.id, themeColor: rgbTheme.themeColor, fontColor: "white" },
                rgbTheme.themeColor,
                " - ",
                rgbTheme.rgbValue));
        }),
        react_1.default.createElement(ThemeColors, { themeColor: "white", fontColor: "black" }, "white - rgb(255, 255, 255)")));
};
exports.AvailableShadesColors = AvailableShadesColors;
const AvailablePrimaryColors = () => {
    const primaryColors = data_1.default.slice(7, 12);
    return (react_1.default.createElement(styled_components_1.ThemeProvider, { theme: index_1.defaultTheme },
        primaryColors.map((rgbTheme) => {
            return (react_1.default.createElement(ThemeColors, { key: rgbTheme.id, themeColor: rgbTheme.themeColor, fontColor: "white" },
                rgbTheme.themeColor,
                " - ",
                rgbTheme.rgbValue));
        }),
        react_1.default.createElement(ThemeColors, { themeColor: "primaryBackground", fontColor: "black" }, "primarybackground - rgb(240, 246, 254)")));
};
exports.AvailablePrimaryColors = AvailablePrimaryColors;
const AvailableSecondaryColors = () => {
    const secondaryColors = data_1.default.slice(13, 18);
    return (react_1.default.createElement(styled_components_1.ThemeProvider, { theme: index_1.defaultTheme },
        secondaryColors.map((rgbTheme) => {
            return (react_1.default.createElement(ThemeColors, { key: rgbTheme.id, themeColor: rgbTheme.themeColor, fontColor: "white" },
                rgbTheme.themeColor,
                " - ",
                rgbTheme.rgbValue));
        }),
        react_1.default.createElement(ThemeColors, { themeColor: "secondaryBackground", fontColor: "black" }, "secondaryBackground - rgb(247, 246, 255)")));
};
exports.AvailableSecondaryColors = AvailableSecondaryColors;
const AvailableSuccessColors = () => {
    const successColors = data_1.default.slice(19, 24);
    return (react_1.default.createElement(styled_components_1.ThemeProvider, { theme: index_1.defaultTheme }, successColors.map((rgbTheme) => {
        return (react_1.default.createElement(ThemeColors, { key: rgbTheme.id, themeColor: rgbTheme.themeColor, fontColor: "white" },
            rgbTheme.themeColor,
            " - ",
            rgbTheme.rgbValue));
    })));
};
exports.AvailableSuccessColors = AvailableSuccessColors;
const AvailableNoticeColors = () => {
    const noticeColors = data_1.default.slice(24, 29);
    return (react_1.default.createElement(styled_components_1.ThemeProvider, { theme: index_1.defaultTheme }, noticeColors.map((rgbTheme) => {
        return (react_1.default.createElement(ThemeColors, { key: rgbTheme.id, themeColor: rgbTheme.themeColor, fontColor: "white" },
            rgbTheme.themeColor,
            " - ",
            rgbTheme.rgbValue));
    })));
};
exports.AvailableNoticeColors = AvailableNoticeColors;
const AvailableErrorColors = () => {
    const errorColors = data_1.default.slice(29, 34);
    return (react_1.default.createElement(styled_components_1.ThemeProvider, { theme: index_1.defaultTheme }, errorColors.map((rgbTheme) => {
        return (react_1.default.createElement(ThemeColors, { key: rgbTheme.id, themeColor: rgbTheme.themeColor, fontColor: "white" },
            rgbTheme.themeColor,
            " - ",
            rgbTheme.rgbValue));
    })));
};
exports.AvailableErrorColors = AvailableErrorColors;
const MockTheme = ({ themeColor }) => {
    return (react_1.default.createElement(styled_components_1.ThemeProvider, { theme: index_1.defaultTheme },
        react_1.default.createElement(ThemeColors, { "data-testid": "theme-colors", themeColor: themeColor, fontColor: "white" }, themeColor)));
};
exports.MockTheme = MockTheme;
const PlaygroundTheme = ({ themeColor }) => {
    const lightColor = themeColor === 'white' ||
        themeColor === 'primaryBackground' ||
        themeColor === 'secondaryBackground';
    const getRGB = (themeArray, value) => {
        const result = data_1.default.find((obj) => {
            return obj.themeColor === value;
        });
        return result ? result.rgbValue : null;
    };
    return (react_1.default.createElement(styled_components_1.ThemeProvider, { theme: index_1.defaultTheme },
        react_1.default.createElement(ThemeColors, { themeColor: themeColor, fontColor: lightColor ? 'black' : 'white' },
            themeColor,
            " - ",
            getRGB(data_1.default, themeColor))));
};
exports.PlaygroundTheme = PlaygroundTheme;
//# sourceMappingURL=theme.composition.js.map