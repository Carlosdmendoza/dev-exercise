// Definitions in this file are only for values that a theme can have, it does
// NOT define the colors themselves.

/**
 * SEMANTIC colors for the PHDS. Will have different shades
 *
 * If you need more, you can use declaration merging to extend this object.
 *
 * *Notes:*
 * - Whenever **refactoring** a color name, please make sure to alter both the key and the value
 */
export enum SemanticColorEnum {
    primary = 'primary',
    secondary = 'secondary',
    success = 'success',
    notice = 'notice',
    error = 'error',
}

/**
 * PALETTE colors for the PHDS. Will have different shades.
 *
 * If you need more, you can use declaration merging to extend this object.
 *
 * *Notes:*
 * - Whenever **refactoring** a color name, please make sure to alter both the `key` and the `value`
 */
export enum PaletteColorEnum {
    grey = 'grey',
}

/**
 * SHADES for the PHDS.
 *
 * If you need more, you can use declaration merging
 * to extend this object.
 *
 * *Notes:*
 * - Declare new shades in PascalCase as they will be composed together with the semantic
 * colors to create a camelCase color name.
 * - Whenever **refactoring** a color name, please make sure to alter both the key and the value
 */
export enum ShadeEnum {
    Darkest = 'Darkest',
    Darker = 'Darker',
    Lighter = 'Lighter',
    Lightest = 'Lightest',
}

/**
 * PLAIN colors (No shades!) for the PHDS.
 * For now also used for edge case colors. Like background colors.
 * Commented colors means that definitions were not found when migrating to V2.
 *
 * If you need more, you can use declaration merging to extend this object.
 */
export enum PlainColorsEnum {
    defaultColor = 'defaultColor',
    black = 'black',
    white = 'white',
    primaryBackground = 'primaryBackground',
    secondaryBackground = 'secondaryBackground',
    mediaPlaceholderGrey = 'mediaPlaceholderGrey',
    // backgroundPrimaryLightest = 'backgroundPrimaryLightest',
    // backgroundSecondaryLightest = 'backgroundSecondaryLightest',
    // neutral = 'neutral',
    // highlight = 'primary',
    // info = 'primary'
}

/**
 * Contains accepted css keywords that are not rgb colors.
 * @example 'inherit'
 */
export enum KeywordColorEnum {
    transparent = 'transparent',
    inherit = 'inherit',
}

/// Main Export ///
/**
 * The full color palette for the PHDS. **Automatically generated** from the
 * definitions of semantic and palette colors, shades of both, and plain colors
 * without shades.
 *
 * **It is recommended to use this type as a `Prop` type when creating PHDS
 * components**
 *
 * *Notes:*
 * - For use in logic chains that could get refactored later, please use {@link ColorsEnum}
 */
export type Colors =
    | `${SemanticColorEnum}` // Example: 'primary'
    | `${SemanticColorEnum}${ShadeEnum}` // Example: 'primaryDarkest'
    | `${PaletteColorEnum}` // Example: 'grey'
    | `${PaletteColorEnum}${ShadeEnum}` // Example: 'greyDarkest'
    | `${PlainColorsEnum}` // Example: 'black'
    | `${KeywordColorEnum}`; // Example: 'transparent'

// The code below was done to try and provide a generated enum from the
// color string literal types. so it could be used in logic chains instead of
// string literals to make it easier to refactor color names in the future.
// Currently it is not providing enough refactoring value to justify the usage.
// It is also not currently possible to create enums from string literals, as of TypeScript 4.3.2.
// Here is a GH issue asking for such a feature: https://github.com/microsoft/TypeScript/issues/40793

// function createEnumObject<T extends string>(o: { [P in T]: P }) {
//     return o;
// }

// /**
//  * "Enum" object automatically generated based on the {@link Colors} type.
//  *
//  * **It is recommended to utilize this enum in logic chains (switch, ifs, etc)
//  * when you are creating PHDS components, this way it is easier to refactor
//  * later**
//  *
//  * *Notes:*
//  * - For props types it is recommended to use {@link Colors}
//  * - The `enum` gets generated from the `values` defined in the enums, not the keys.
//  * So make sure that when **refactoring** a color name, you change the
//  * value as well.
//  */
// export const ColorsEnum = createEnumObject<Colors>({} as any);

/// Individual Color & Shade Types Export ///
/**
 * Type derived from {@link SemanticColorEnum}, used by the Design System components
 * for string literal hints.
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link SemanticColorEnum}.
 */
export type SemanticColor = `${SemanticColorEnum}`;

/**
 * Type derived from {@link PaletteColorEnum}, used by the Design System components
 * for string literal hints.
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link PaletteColorEnum}.
 */
export type PaletteColor = `${PaletteColorEnum}`;

/**
 * Type derived from {@link PlainColorsEnum}, used by the Design System components
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link PlainColorsEnum}.
 */
export type PlainColor = `${PlainColorsEnum}`;

/**
 * Type derived from {@link ShadeEnum}, used by the Design System components
 * for string literal hints.
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link ShadeEnum}.
 */
export type Shade = `${ShadeEnum}`;

/**
 * Type derived from {@link KeywordColorEnum}, used by the Design System components
 * for string literal hints.
 *
 * *Notes:*
 * - Do not extend or declare new values on this type, rather do so extending
 * {@link KeywordColorEnum}.
 */
export type KeywordColor = `${KeywordColorEnum}`;
