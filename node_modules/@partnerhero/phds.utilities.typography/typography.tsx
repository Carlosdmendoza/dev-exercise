/* eslint-disable no-console */
import React, { ReactNode } from 'react';
import styled, {
    ThemeProvider,
    css,
    FlattenInterpolation,
} from 'styled-components';

import { defaultTheme, Colors } from '@partnerhero/phds.utilities.theme';
import { CSSProps } from '@partnerhero/phds.utilities.shorthands';

interface TypographyOptionsProps {
    margin?: string;
}

/**
 * Converts px to rem using a base font size of 16px
 * rounded to 4 decimal places so that when multiplied by the fontRoot, it will give a whole number
 *
 * example: `pxToRem(16);` ==> `16px -> 1rem`
 * @param px number of px to convert
 * @returns a string with the value in rem
 */
export const pxToRem = (px: number, fontRoot = 16) => {
    const rem = (px / fontRoot).toFixed(4);
    const value = parseFloat(rem);
    return `${value}rem`;
};

/**
 * Extracts the rem's float value
 *
 * example: `remToValue('16rem');` ==> 16
 * @param remValue rem value from which its pure float will be extracted
 * @returns a number representing the rem's float value
 */
export const remToValue = (remValue: string) =>
    remValue ? Number(remValue.replace('rem', '')) : 0;

const fontSizes = {
    h1: pxToRem(45),
    h2: pxToRem(35),
    h3: pxToRem(30),
    h4: pxToRem(25),
    h5: pxToRem(18),
    large: pxToRem(16),
    medium: pxToRem(14),
    small: pxToRem(12),
    xsmall: pxToRem(10),
};

const fontMargins = {
    h1: `0 0 ${pxToRem(25)} 0`,
    h2: `0 0 ${pxToRem(20)} 0`,
    h3: `0 0 ${pxToRem(15)} 0`,
    h4: `0 0 ${pxToRem(15)} 0`,
    h5: `0 0 ${pxToRem(10)} 0`,
    large: `0 0 ${pxToRem(35)} 0`,
    medium: `0 0 ${pxToRem(25)} 0`,
    small: `0 0 ${pxToRem(20)} 0`,
    xsmall: `0 0 ${pxToRem(15)} 0`,
};

const variantDefinitions = {
    h1: css<TypographyOptionsProps>`
        font-size: ${fontSizes.h1};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.h1};
        `};
    `,
    h2: css<TypographyOptionsProps>`
        font-size: ${fontSizes.h2};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.h2};
        `};
    `,
    h3: css<TypographyOptionsProps>`
        font-size: ${fontSizes.h3};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.h3};
        `};
    `,
    h4: css<TypographyOptionsProps>`
        font-size: ${fontSizes.h4};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.h4};
        `};
    `,
    h5: css<TypographyOptionsProps>`
        font-size: ${fontSizes.h5};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.h5};
        `};
    `,
    large: css<TypographyOptionsProps>`
        font-size: ${fontSizes.large};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.large};
        `};
    `,
    medium: css<TypographyOptionsProps>`
        font-size: ${fontSizes.medium};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.medium};
        `};
    `,
    small: css<TypographyOptionsProps>`
        font-size: ${fontSizes.small};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.small};
        `};
    `,
    xsmall: css<TypographyOptionsProps>`
        font-size: ${fontSizes.xsmall};
        ${(props) => css`
            margin: ${props.margin ? `${props.margin}` : fontMargins.xsmall};
        `};
    `,
};

const defaultTypographyStyles = css`
    letter-spacing: 0;
    display: flex;
    align-items: center;
    justify-content: ${(props: { align?: 'left' | 'center' | 'right' }) =>
        props.align ? `${props.align}` : 'left'};
`;

// NAVIGATION

export const defaultNavigationStyles = css`
    ${defaultTypographyStyles}
    font-family: Inter-SemiBold;
    font-weight: 600;
    font-size: ${pxToRem(12)};
    line-height: ${pxToRem(26)};
`;

// HEADERS

export const defaultHeaderStyles = css<TypographyOptionsProps>`
    ${defaultTypographyStyles}
    font-family: Inter-SemiBold;
    line-height: normal;
    font-weight: 600;
`;

export const header1 = css<TypographyOptionsProps>`
    ${defaultHeaderStyles}
    ${variantDefinitions.h1}
`;

export const header2 = css<TypographyOptionsProps>`
    ${defaultHeaderStyles}
    ${variantDefinitions.h2}
`;

export const header3 = css<TypographyOptionsProps>`
    ${defaultHeaderStyles}
    ${variantDefinitions.h3}
`;

export const header4 = css<TypographyOptionsProps>`
    ${defaultHeaderStyles}
    ${variantDefinitions.h4}
`;

export const header5 = css<TypographyOptionsProps>`
    ${defaultHeaderStyles}
    ${variantDefinitions.h5}
`;

// BODY

/**
 * Default body styles
 */
const defaultBodyStyles = css<TypographyOptionsProps>`
    ${defaultTypographyStyles}
    font-family: Inter-Regular;
    font-weight: normal;
`;

/**
 * 16 px (when root font size is 16px)
 */
export const bodyLarge = css<TypographyOptionsProps>`
    ${defaultBodyStyles}
    ${variantDefinitions.large}
    line-height: ${pxToRem(26)};
`;
/**
 * 14 px (when root font size is 16px)
 */
export const bodyMedium = css<TypographyOptionsProps>`
    ${defaultBodyStyles}
    ${variantDefinitions.medium}
    line-height: ${pxToRem(22)};
`;

/**
 * 12 px (when root font size is 16px)
 */
export const bodySmall = css<TypographyOptionsProps>`
    ${defaultBodyStyles}
    ${variantDefinitions.small}
    line-height: ${pxToRem(20)};
`;

/**
 * 10 px (when root font size is 16px)
 */
export const bodyExtraSmall = css<TypographyOptionsProps>`
    ${defaultBodyStyles}
    ${variantDefinitions.xsmall}
    line-height: ${pxToRem(20)};
`;

// BOLD

export const defaultBoldStyles = css`
    ${defaultTypographyStyles}
    font-family: Inter-SemiBold;
    font-weight: 600;
    line-height: ${pxToRem(22)};
`;

export const boldLarge = css<TypographyOptionsProps>`
    ${defaultBoldStyles}
    ${variantDefinitions.large}
`;

export const boldMedium = css<TypographyOptionsProps>`
    ${defaultBoldStyles}
    ${variantDefinitions.medium}
`;

export const boldSmall = css<TypographyOptionsProps>`
    ${defaultBoldStyles}
    ${variantDefinitions.small}
`;

export const boldExtraSmall = css<TypographyOptionsProps>`
    ${defaultBoldStyles}
    ${variantDefinitions.xsmall}
`;

/**
 *  To add new typography styles, add them to this object.
 */
export const TypographyOptions = {
    /**
     * The font size for the `h1` tag
     * @default '45px' in rem
     */
    h1: header1,
    /**
     * The font size for the `h2` tag
     * @default '35px' in rem
     */
    h2: header2,
    /**
     * The font size for the `h3` tag
     * @default '30px' in rem
     */
    h3: header3,
    /**
     * The font size for the `h4` tag
     * @default '25px' in rem
     */
    h4: header4,
    /**
     * The font size for the `h5` tag
     * @default '18px' in rem
     */
    h5: header5,
    /**
     * The font size for the `bodyLarge` and `boldLarge` tag
     * @default '16px' in rem
     */
    boldLarge,
    /**
     * The font size for the `bodyMedium` and `boldMedium` tag
     * @default '14px' in rem
     */
    boldMedium,
    /**
     * The font size for the `bodySmall` and `boldSmall` tag
     * @default '12px' in rem
     */
    boldSmall,
    /**
     * The font size for the `bodyExtraSmall` and `boldExtraSmall` tag
     * @default '10px' in rem
     */
    boldExtraSmall,
    /**
     * The font size for the `bodyLarge` and `boldLarge` tag
     * @default '16px' in rem
     */
    bodyLarge,
    /**
     * The font size for the `bodyMedium` and `boldMedium` tag
     * @default '14px' in rem
     */
    bodyMedium,
    /**
     * The font size for the `bodySmall` and `boldSmall` tag
     * @default '12px' in rem
     */
    bodySmall,
    /**
     * The font size for the `bodyExtraSmall` and `boldExtraSmall` tag
     * @default '10px' in rem
     */
    bodyExtraSmall,
};

export type TypographyTypes = keyof typeof TypographyOptions;

export const TypographyFontAwesomeSizeOptions = {
    xs: pxToRem(12),
    sm: pxToRem(14),
    lg: pxToRem(20),
    '24px': pxToRem(24),
    '1x': pxToRem(16),
    '2x': pxToRem(32),
    '3x': pxToRem(48),
    '4x': pxToRem(64),
    '5x': pxToRem(80),
    '6x': pxToRem(96),
    '7x': pxToRem(112),
    '8x': pxToRem(128),
    '9x': pxToRem(144),
    '10x': pxToRem(160),
};

export type TypographyFontAwesomeSizeTypes =
    keyof typeof TypographyFontAwesomeSizeOptions;

interface TypographyBodyProps {
    color: Colors;
    margin?: string;
    variant: TypographyTypes;
    align?: 'left' | 'center' | 'right';
    customVariant?: FlattenInterpolation<any>;
}
const TypographyBody = styled.div<TypographyBodyProps>`
    color: ${(props) => `${props.theme.colors[props.color]}`};
    ${(props) =>
        props.margin &&
        css`
            margin: ${props.margin};
        `};
    ${(props) =>
        props.align &&
        css`
            justify-content: ${props.align};
        `};
    ${(props) => TypographyOptions[props.variant]};
    ${({ customVariant }) => customVariant};
`;
export interface TypographyProps extends CSSProps {
    /**
     * Children.
     */
    children: ReactNode;

    /**
     * Used to set any of the theme colors for the typography.
     */
    color?: Colors;

    /**
     * Used to set one of the available typography styles.
     */
    variant?: TypographyTypes;

    /**
     * Used to set the margin as CSS does.
     * Each typography has its own default margin that can be checked on the live examples.
     */
    // eslint-disable-next-line react/require-default-props
    margin?: string;

    /**
     * Used to override the default (left) alignment for the typography.
     */
    align?: 'left' | 'center' | 'right';

    /**
     * Used to pass a custom variant using styled-components' css prop.
     */
    customVariant?: FlattenInterpolation<any>;
}

export function Typography({
    children,
    color = 'inherit',
    margin,
    variant = 'bodyMedium',
    align = 'left',
    style,
    customVariant,
    ...rest
}: TypographyProps) {
    const typographyTag =
        (TypographyOptions[variant] === header1 && 'h1') ||
        (TypographyOptions[variant] === header2 && 'h2') ||
        (TypographyOptions[variant] === header3 && 'h3') ||
        (TypographyOptions[variant] === header4 && 'h4') ||
        (TypographyOptions[variant] === header5 && 'h5') ||
        (TypographyOptions[variant] === boldExtraSmall && 'strong') ||
        (TypographyOptions[variant] === boldSmall && 'strong') ||
        (TypographyOptions[variant] === boldMedium && 'strong') ||
        (TypographyOptions[variant] === boldLarge && 'strong') ||
        'p';

    return (
        <ThemeProvider theme={defaultTheme}>
            <TypographyBody
                as={typographyTag}
                color={color}
                margin={margin}
                align={align}
                variant={variant}
                style={style}
                customVariant={customVariant}
                {...rest}
            >
                {children}
            </TypographyBody>
        </ThemeProvider>
    );
}
