import { ReactNode } from 'react';
import { FlattenInterpolation } from 'styled-components';
import { Colors } from '@partnerhero/phds.utilities.theme';
import { CSSProps } from '@partnerhero/phds.utilities.shorthands';
interface TypographyOptionsProps {
    margin?: string;
}
/**
 * Converts px to rem using a base font size of 16px
 * rounded to 4 decimal places so that when multiplied by the fontRoot, it will give a whole number
 *
 * example: `pxToRem(16);` ==> `16px -> 1rem`
 * @param px number of px to convert
 * @returns a string with the value in rem
 */
export declare const pxToRem: (px: number, fontRoot?: number) => string;
/**
 * Extracts the rem's float value
 *
 * example: `remToValue('16rem');` ==> 16
 * @param remValue rem value from which its pure float will be extracted
 * @returns a number representing the rem's float value
 */
export declare const remToValue: (remValue: string) => number;
export declare const defaultNavigationStyles: FlattenInterpolation<import("styled-components").ThemeProps<import("styled-components").DefaultTheme>>;
export declare const defaultHeaderStyles: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const header1: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const header2: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const header3: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const header4: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const header5: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
/**
 * 16 px (when root font size is 16px)
 */
export declare const bodyLarge: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
/**
 * 14 px (when root font size is 16px)
 */
export declare const bodyMedium: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
/**
 * 12 px (when root font size is 16px)
 */
export declare const bodySmall: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
/**
 * 10 px (when root font size is 16px)
 */
export declare const bodyExtraSmall: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const defaultBoldStyles: FlattenInterpolation<import("styled-components").ThemeProps<import("styled-components").DefaultTheme>>;
export declare const boldLarge: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const boldMedium: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const boldSmall: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
export declare const boldExtraSmall: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
/**
 *  To add new typography styles, add them to this object.
 */
export declare const TypographyOptions: {
    /**
     * The font size for the `h1` tag
     * @default '45px' in rem
     */
    h1: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `h2` tag
     * @default '35px' in rem
     */
    h2: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `h3` tag
     * @default '30px' in rem
     */
    h3: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `h4` tag
     * @default '25px' in rem
     */
    h4: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `h5` tag
     * @default '18px' in rem
     */
    h5: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `bodyLarge` and `boldLarge` tag
     * @default '16px' in rem
     */
    boldLarge: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `bodyMedium` and `boldMedium` tag
     * @default '14px' in rem
     */
    boldMedium: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `bodySmall` and `boldSmall` tag
     * @default '12px' in rem
     */
    boldSmall: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `bodyExtraSmall` and `boldExtraSmall` tag
     * @default '10px' in rem
     */
    boldExtraSmall: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `bodyLarge` and `boldLarge` tag
     * @default '16px' in rem
     */
    bodyLarge: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `bodyMedium` and `boldMedium` tag
     * @default '14px' in rem
     */
    bodyMedium: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `bodySmall` and `boldSmall` tag
     * @default '12px' in rem
     */
    bodySmall: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
    /**
     * The font size for the `bodyExtraSmall` and `boldExtraSmall` tag
     * @default '10px' in rem
     */
    bodyExtraSmall: FlattenInterpolation<import("styled-components").ThemedStyledProps<TypographyOptionsProps, import("styled-components").DefaultTheme>>;
};
export declare type TypographyTypes = keyof typeof TypographyOptions;
export declare const TypographyFontAwesomeSizeOptions: {
    xs: string;
    sm: string;
    lg: string;
    '24px': string;
    '1x': string;
    '2x': string;
    '3x': string;
    '4x': string;
    '5x': string;
    '6x': string;
    '7x': string;
    '8x': string;
    '9x': string;
    '10x': string;
};
export declare type TypographyFontAwesomeSizeTypes = keyof typeof TypographyFontAwesomeSizeOptions;
export interface TypographyProps extends CSSProps {
    /**
     * Children.
     */
    children: ReactNode;
    /**
     * Used to set any of the theme colors for the typography.
     */
    color?: Colors;
    /**
     * Used to set one of the available typography styles.
     */
    variant?: TypographyTypes;
    /**
     * Used to set the margin as CSS does.
     * Each typography has its own default margin that can be checked on the live examples.
     */
    margin?: string;
    /**
     * Used to override the default (left) alignment for the typography.
     */
    align?: 'left' | 'center' | 'right';
    /**
     * Used to pass a custom variant using styled-components' css prop.
     */
    customVariant?: FlattenInterpolation<any>;
}
export declare function Typography({ children, color, margin, variant, align, style, customVariant, ...rest }: TypographyProps): JSX.Element;
export {};
