import React from 'react';
import 'jest-styled-components';
import { render } from '@testing-library/react';
import { Typography } from './index';
import { pxToRem } from './typography';

const testId = 'DsTypography';
describe('Typography', () => {
    it('Should match the styles related to the header1', () => {
        const { getByTestId } = render(
            <Typography variant="h1" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const header1 = getByTestId(testId);

        expect(header1).toHaveStyleRule('letter-spacing', '0');
        expect(header1).toHaveStyleRule('font-family', 'Inter-SemiBold');
        expect(header1).toHaveStyleRule('font-weight', '600');
        expect(header1).toHaveStyleRule('line-height', 'normal');
        expect(header1).toHaveStyleRule('font-size', '2.8125rem');
        expect(header1).toHaveStyleRule('margin', '0 0 1.5625rem 0');
        expect(header1).toHaveStyleRule('display', 'flex');
        expect(header1).toHaveStyleRule('align-items', 'center');
        expect(header1).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the header2', () => {
        const { getByTestId } = render(
            <Typography variant="h2" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const header2 = getByTestId(testId);

        expect(header2).toHaveStyleRule('letter-spacing', '0');
        expect(header2).toHaveStyleRule('font-family', 'Inter-SemiBold');
        expect(header2).toHaveStyleRule('font-weight', '600');
        expect(header2).toHaveStyleRule('line-height', 'normal');
        expect(header2).toHaveStyleRule('font-size', '2.1875rem');
        expect(header2).toHaveStyleRule('margin', '0 0 1.25rem 0');
        expect(header2).toHaveStyleRule('display', 'flex');
        expect(header2).toHaveStyleRule('align-items', 'center');
        expect(header2).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the header3', () => {
        const { getByTestId } = render(
            <Typography variant="h3" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const header3 = getByTestId(testId);

        expect(header3).toHaveStyleRule('letter-spacing', '0');
        expect(header3).toHaveStyleRule('font-family', 'Inter-SemiBold');
        expect(header3).toHaveStyleRule('font-weight', '600');
        expect(header3).toHaveStyleRule('line-height', 'normal');
        expect(header3).toHaveStyleRule('font-size', '1.875rem');
        expect(header3).toHaveStyleRule('margin', '0 0 0.9375rem 0');
        expect(header3).toHaveStyleRule('display', 'flex');
        expect(header3).toHaveStyleRule('align-items', 'center');
        expect(header3).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the header4', () => {
        const { getByTestId } = render(
            <Typography variant="h4" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const header4 = getByTestId(testId);

        expect(header4).toHaveStyleRule('letter-spacing', '0');
        expect(header4).toHaveStyleRule('font-family', 'Inter-SemiBold');
        expect(header4).toHaveStyleRule('font-weight', '600');
        expect(header4).toHaveStyleRule('line-height', 'normal');
        expect(header4).toHaveStyleRule('font-size', '1.5625rem');
        expect(header4).toHaveStyleRule('margin', '0 0 0.9375rem 0');
        expect(header4).toHaveStyleRule('display', 'flex');
        expect(header4).toHaveStyleRule('align-items', 'center');
        expect(header4).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the header5', () => {
        const { getByTestId } = render(
            <Typography variant="h5" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const header5 = getByTestId(testId);

        expect(header5).toHaveStyleRule('letter-spacing', '0');
        expect(header5).toHaveStyleRule('font-family', 'Inter-SemiBold');
        expect(header5).toHaveStyleRule('font-weight', '600');
        expect(header5).toHaveStyleRule('line-height', 'normal');
        expect(header5).toHaveStyleRule('font-size', '1.125rem');
        expect(header5).toHaveStyleRule('margin', '0 0 0.625rem 0');
        expect(header5).toHaveStyleRule('display', 'flex');
        expect(header5).toHaveStyleRule('align-items', 'center');
        expect(header5).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the bodyLarge', () => {
        const { getByTestId } = render(
            <Typography variant="bodyLarge" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const bodyLargeTypography = getByTestId(testId);

        expect(bodyLargeTypography).toHaveStyleRule('letter-spacing', '0');
        expect(bodyLargeTypography).toHaveStyleRule(
            'font-family',
            'Inter-Regular',
        );
        expect(bodyLargeTypography).toHaveStyleRule('font-weight', 'normal');
        expect(bodyLargeTypography).toHaveStyleRule('font-size', '1rem');
        expect(bodyLargeTypography).toHaveStyleRule(
            'margin',
            '0 0 2.1875rem 0',
        );
        expect(bodyLargeTypography).toHaveStyleRule('line-height', pxToRem(26));
        expect(bodyLargeTypography).toHaveStyleRule('display', 'flex');
        expect(bodyLargeTypography).toHaveStyleRule('align-items', 'center');
        expect(bodyLargeTypography).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the bodyMedium', () => {
        const { getByTestId } = render(
            <Typography variant="bodyMedium" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const bodyMediumTypography = getByTestId(testId);

        expect(bodyMediumTypography).toHaveStyleRule('letter-spacing', '0');
        expect(bodyMediumTypography).toHaveStyleRule(
            'font-family',
            'Inter-Regular',
        );
        expect(bodyMediumTypography).toHaveStyleRule('font-weight', 'normal');
        expect(bodyMediumTypography).toHaveStyleRule('font-size', '0.875rem');
        expect(bodyMediumTypography).toHaveStyleRule(
            'margin',
            '0 0 1.5625rem 0',
        );
        expect(bodyMediumTypography).toHaveStyleRule(
            'line-height',
            pxToRem(22),
        );
        expect(bodyMediumTypography).toHaveStyleRule('display', 'flex');
        expect(bodyMediumTypography).toHaveStyleRule('align-items', 'center');
        expect(bodyMediumTypography).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the bodySmall', () => {
        const { getByTestId } = render(
            <Typography variant="bodySmall" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const bodySmallTypography = getByTestId(testId);

        expect(bodySmallTypography).toHaveStyleRule('letter-spacing', '0');
        expect(bodySmallTypography).toHaveStyleRule(
            'font-family',
            'Inter-Regular',
        );
        expect(bodySmallTypography).toHaveStyleRule('font-weight', 'normal');
        expect(bodySmallTypography).toHaveStyleRule('font-size', '0.75rem');
        expect(bodySmallTypography).toHaveStyleRule('margin', '0 0 1.25rem 0');
        expect(bodySmallTypography).toHaveStyleRule('line-height', pxToRem(20));
        expect(bodySmallTypography).toHaveStyleRule('display', 'flex');
        expect(bodySmallTypography).toHaveStyleRule('align-items', 'center');
        expect(bodySmallTypography).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the bodyExtraSmall', () => {
        const { getByTestId } = render(
            <Typography
                variant="bodyExtraSmall"
                color="black"
                data-testid={testId}
            >
                Hello World
            </Typography>,
        );
        const bodyExtraSmallTypography = getByTestId(testId);

        expect(bodyExtraSmallTypography).toHaveStyleRule('letter-spacing', '0');
        expect(bodyExtraSmallTypography).toHaveStyleRule(
            'font-family',
            'Inter-Regular',
        );
        expect(bodyExtraSmallTypography).toHaveStyleRule(
            'font-weight',
            'normal',
        );
        expect(bodyExtraSmallTypography).toHaveStyleRule(
            'font-size',
            '0.625rem',
        );
        expect(bodyExtraSmallTypography).toHaveStyleRule(
            'margin',
            '0 0 0.9375rem 0',
        );
        expect(bodyExtraSmallTypography).toHaveStyleRule(
            'line-height',
            pxToRem(20),
        );
        expect(bodyExtraSmallTypography).toHaveStyleRule('display', 'flex');
        expect(bodyExtraSmallTypography).toHaveStyleRule(
            'align-items',
            'center',
        );
        expect(bodyExtraSmallTypography).toHaveStyleRule(
            'justify-content',
            'left',
        );
    });

    it('Should match the styles related to the boldLarge', () => {
        const { getByTestId } = render(
            <Typography variant="boldLarge" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const boldLargeTypography = getByTestId(testId);

        expect(boldLargeTypography).toHaveStyleRule('letter-spacing', '0');
        expect(boldLargeTypography).toHaveStyleRule(
            'font-family',
            'Inter-SemiBold',
        );
        expect(boldLargeTypography).toHaveStyleRule('font-weight', '600');
        expect(boldLargeTypography).toHaveStyleRule('font-size', '1rem');
        expect(boldLargeTypography).toHaveStyleRule(
            'margin',
            '0 0 2.1875rem 0',
        );
        expect(boldLargeTypography).toHaveStyleRule('line-height', pxToRem(22));
        expect(boldLargeTypography).toHaveStyleRule('display', 'flex');
        expect(boldLargeTypography).toHaveStyleRule('align-items', 'center');
        expect(boldLargeTypography).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the boldMedium', () => {
        const { getByTestId } = render(
            <Typography variant="boldMedium" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const boldMediumTypography = getByTestId(testId);

        expect(boldMediumTypography).toHaveStyleRule('letter-spacing', '0');
        expect(boldMediumTypography).toHaveStyleRule(
            'font-family',
            'Inter-SemiBold',
        );
        expect(boldMediumTypography).toHaveStyleRule('font-weight', '600');
        expect(boldMediumTypography).toHaveStyleRule('font-size', '0.875rem');
        expect(boldMediumTypography).toHaveStyleRule(
            'margin',
            '0 0 1.5625rem 0',
        );
        expect(boldMediumTypography).toHaveStyleRule(
            'line-height',
            pxToRem(22),
        );
        expect(boldMediumTypography).toHaveStyleRule('display', 'flex');
        expect(boldMediumTypography).toHaveStyleRule('align-items', 'center');
        expect(boldMediumTypography).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the boldSmall', () => {
        const { getByTestId } = render(
            <Typography variant="boldSmall" color="black" data-testid={testId}>
                Hello World
            </Typography>,
        );
        const boldSmallTypography = getByTestId(testId);

        expect(boldSmallTypography).toHaveStyleRule('letter-spacing', '0');
        expect(boldSmallTypography).toHaveStyleRule(
            'font-family',
            'Inter-SemiBold',
        );
        expect(boldSmallTypography).toHaveStyleRule('font-weight', '600');
        expect(boldSmallTypography).toHaveStyleRule('font-size', '0.75rem');
        expect(boldSmallTypography).toHaveStyleRule('margin', '0 0 1.25rem 0');
        expect(boldSmallTypography).toHaveStyleRule('line-height', pxToRem(22));
        expect(boldSmallTypography).toHaveStyleRule('display', 'flex');
        expect(boldSmallTypography).toHaveStyleRule('align-items', 'center');
        expect(boldSmallTypography).toHaveStyleRule('justify-content', 'left');
    });

    it('Should match the styles related to the boldExtraSmall', () => {
        const { getByTestId } = render(
            <Typography
                variant="boldExtraSmall"
                color="black"
                data-testid={testId}
            >
                Hello World
            </Typography>,
        );
        const boldExtraSmallTypography = getByTestId(testId);

        expect(boldExtraSmallTypography).toHaveStyleRule('letter-spacing', '0');
        expect(boldExtraSmallTypography).toHaveStyleRule(
            'font-family',
            'Inter-SemiBold',
        );
        expect(boldExtraSmallTypography).toHaveStyleRule('font-weight', '600');
        expect(boldExtraSmallTypography).toHaveStyleRule(
            'font-size',
            '0.625rem',
        );
        expect(boldExtraSmallTypography).toHaveStyleRule(
            'margin',
            '0 0 0.9375rem 0',
        );
        expect(boldExtraSmallTypography).toHaveStyleRule(
            'line-height',
            pxToRem(22),
        );
        expect(boldExtraSmallTypography).toHaveStyleRule('display', 'flex');
        expect(boldExtraSmallTypography).toHaveStyleRule(
            'align-items',
            'center',
        );
        expect(boldExtraSmallTypography).toHaveStyleRule(
            'justify-content',
            'left',
        );
    });

    it('Should match the theme color passed on the prop color', () => {
        const { getByTestId } = render(
            <Typography
                variant="boldExtraSmall"
                color="black"
                data-testid={testId}
            >
                Hello World
            </Typography>,
        );
        const blackTypography = getByTestId(testId);

        expect(blackTypography).toHaveStyleRule('color', 'rgb(10,10,10)');
    });

    it('Should match the value 50px passed on the prop margin', () => {
        const { getByTestId } = render(
            <Typography
                variant="boldExtraSmall"
                color="black"
                margin="50px"
                data-testid={testId}
            >
                Hello World
            </Typography>,
        );
        const typographyWithMargin = getByTestId(testId);

        expect(typographyWithMargin).toHaveStyleRule('margin', '50px');
    });

    it('Should be aligned on the center when the align prop has the value center', () => {
        const { getByTestId } = render(
            <Typography
                variant="boldExtraSmall"
                color="black"
                align="center"
                data-testid={testId}
            >
                Hello World
            </Typography>,
        );
        const typographyCentered = getByTestId(testId);

        expect(typographyCentered).toHaveStyleRule('justify-content', 'center');
    });

    it('Should be aligned on the right side when the align prop has the value right', () => {
        const { getByTestId } = render(
            <Typography
                variant="boldExtraSmall"
                color="black"
                align="right"
                data-testid={testId}
            >
                Hello World
            </Typography>,
        );
        const typographyCentered = getByTestId(testId);

        expect(typographyCentered).toHaveStyleRule('justify-content', 'right');
    });
});
